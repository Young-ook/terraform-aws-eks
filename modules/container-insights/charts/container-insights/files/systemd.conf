<source>
    @type systemd
    @id in_systemd_kubelet
    @label @systemd
    filters [{ "_SYSTEMD_UNIT": "kubelet.service" }]
    <entry>
    field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
    field_map_strict true
    </entry>
    path /var/log/journal
    <storage>
    @type local
    persistent true
    path /var/log/fluentd-journald-kubelet-pos.json
    </storage>
    read_from_head true
    tag kubelet.service
</source>

<source>
    @type systemd
    @id in_systemd_kubeproxy
    @label @systemd
    filters [{ "_SYSTEMD_UNIT": "kubeproxy.service" }]
    <entry>
    field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
    field_map_strict true
    </entry>
    path /var/log/journal
    <storage>
    @type local
    persistent true
    path /var/log/fluentd-journald-kubeproxy-pos.json
    </storage>
    read_from_head true
    tag kubeproxy.service
</source>

<source>
    @type systemd
    @id in_systemd_docker
    @label @systemd
    filters [{ "_SYSTEMD_UNIT": "docker.service" }]
    <entry>
    field_map {"MESSAGE": "message", "_HOSTNAME": "hostname", "_SYSTEMD_UNIT": "systemd_unit"}
    field_map_strict true
    </entry>
    path /var/log/journal
    <storage>
    @type local
    persistent true
    path /var/log/fluentd-journald-docker-pos.json
    </storage>
    read_from_head true
    tag docker.service
</source>

<label @systemd>
    <filter **>
    @type kubernetes_metadata
    @id filter_kube_metadata_systemd
    </filter>

    <filter **>
    @type record_transformer
    @id filter_systemd_stream_transformer
    <record>
        stream_name ${tag}-${record["hostname"]}
    </record>
    </filter>

    <match **>
    @type cloudwatch_logs
    @id out_cloudwatch_logs_systemd
    region "#{ENV.fetch('REGION')}"
    log_group_name "/aws/containerinsights/#{ENV.fetch('CLUSTER_NAME')}/dataplane"
    log_stream_name_key stream_name
    auto_create_stream true
    remove_log_stream_name_key true
    <buffer>
        flush_interval 5
        chunk_limit_size 2m
        queued_chunks_limit_size 32
        retry_forever true
    </buffer>
    </match>
</label>
